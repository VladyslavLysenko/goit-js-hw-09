{"mappings":"siBAGA,SAASA,EAAcC,EAAUC,GAkB/B,OAfgB,IAAIC,SAAQ,CAACC,EAASC,KAEpC,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KAELH,EACFF,EAAS,C,SAACH,E,MAAUC,IAEpBG,EAAO,C,SAACJ,E,MAAUC,GAAO,GAE1BA,EAAM,G,CAqCb,SAASQ,GAAUT,SAAEA,EAAQC,MAAEA,IAC7BS,EAAAC,GAASC,OAAOC,QAAQ,uBAAqBb,QAAiBC,M,CAEhE,SAASa,GAAQd,SAAEA,EAAQC,MAAEA,IAC3BS,EAAAC,GAASC,OAAOG,QAAQ,sBAAoBf,QAAiBC,M,CAjClDe,SAASC,cAAc,SAE/BC,iBAAiB,UAAWC,IAC/BA,EAAEC,iBAEF,MAAMnB,MAAEA,EAAKoB,KAAEA,EAAIC,OAAEA,GAAWH,EAAEI,cAAcC,SAE1CC,EACGC,OAAOzB,EAAM0B,OADhBF,EAEEC,OAAOL,EAAKM,OAFdF,EAGIC,OAAOJ,EAAOK,OAOxB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAmBG,IAAK,CAK1C7B,EAHe6B,EAAE,EADFH,EAAmBG,EAAIH,GAKnCI,KAAKpB,GACLqB,MAAMhB,E","sources":["src/js/03-promises.js"],"sourcesContent":["import \"flatpickr/dist/flatpickr.min.css\";\nimport Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n\n\n  const promise = new Promise((resolve, reject) => {\n  \n    const shouldResolve = Math.random() > 0.3;\n  \n    setTimeout(() => {\n      \n      if (shouldResolve) {\n        resolve( {position, delay});\n      } else {\n        reject({position, delay});\n      }\n    }, delay);\n    \n  });\n\n  return promise;\n}\n\n\nconst form = document.querySelector(\".form\");\n\nform.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n    \n  const { delay, step, amount } = e.currentTarget.elements;\n    \n  const timeObject = {\n    delay: Number(delay.value),\n    step: Number(step.value),\n    amount: Number(amount.value),\n  }\n\n  // console.log(`\"delay:\"${typeof timeObject.delay}`);\n  // console.log(`\"step:\"${timeObject.step}`);\n  // console.log(`\"amoun:\"${timeObject.amount}`);\n\n  for (let i = 0; i < timeObject.amount; i++) {\n    let interval = timeObject.delay + i * timeObject.step;\n    let position = i+1;\n    // console.log(`\"position\":${position}`);\n    // console.log(`\"interval\":${interval}`);\n    createPromise(position, interval)\n      .then(onSuccess)\n      .catch(onError);\n  }\n\n})\n\nfunction onSuccess({ position, delay }) {\n  Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n}\nfunction onError({ position, delay }) {\n  Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n}\n\n// My first Variant\n  \n    // const interval = setInterval(() => { \n    //   position += 1;\n    //   createPromise(position, timeObject.step)\n    //     .then(({ position, delay }) => {\n    //     Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    //   })\n    //     .catch(({ position, delay }) => {\n    //     Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    //     });\n        \n    //   if (position >= timeObject.amount) {\n    //     clearInterval(interval);\n    //   }\n    // }, timeObject.step)\n\n \n\n// }\n// )\n    \n\n// Var from Ganna\n\n// import { Notify } from 'notiflix';\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n// import 'notiflix/dist/notiflix-3.2.5.min.css';\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       const shouldResolve = Math.random() > 0.3;\n\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//         // Reject\n//       }\n//     }, delay);\n//   });\n// }\n\n// const refs = { form: document.querySelector('.form') };\n// refs.form.addEventListener('submit', onFormSubmit);\n\n// function onFormSubmit(event) {\n//   event.preventDefault();\n//   // const { delay, step, amount } = event.currentTarget.elements;\n//   const delay = Number(event.currentTarget.elements.delay.value);\n//   const step = Number(event.currentTarget.elements.step.value);\n//   const amount = Number(event.currentTarget.elements.amount.value);\n//   for (let i = 0; i < amount; i++) {\n//     let interval = delay + i * step;\n//     createPromise(i + 1, interval)\n//       .then(onSuccess)\n//       .catch(onError);\n//   }\n// }\n// function onSuccess({ position, delay }) {\n//   Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n//     timeout: 4000,\n//   });\n//   console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n// }\n// function onError({ position, delay }) {\n//   Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n//     timeout: 4000,\n//   });\n//   console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n// }\n"],"names":["$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$47d4ff9957288465$var$onSuccess","$parcel$interopDefault","$eWCmQ","Notify","success","$47d4ff9957288465$var$onError","failure","document","querySelector","addEventListener","e","preventDefault","step","amount","currentTarget","elements","timeObject","Number","value","i","then","catch"],"version":3,"file":"03-promises.6e34f65d.js.map"}